#!/usr/bin/env python

import os
import sys
import subprocess
import functools

import pytest


shell = functools.partial(subprocess.call, shell=True)


def django_environ(testing=False):

    def decorator(func):

        settings_module = 'sampleproject.settings'
        if testing:
            settings_module += '_testing'

        def setup_environ():
            sys.path.insert(0, 'sampleproject')
            os.environ['DJANGO_SETTINGS_MODULE'] = settings_module
            print 'Using settings: {0}'.format(settings_module)

        def create_database():
            from django.core.management import call_command
            from django.contrib.auth.models import User

            call_command('syncdb', interactive=False)

            admin, created = User.objects.get_or_create(
                username='admin',
                is_staff=True,
                is_superuser=True
            )
            if created:
                admin.set_password('admin')
                admin.save()

            print 'Superuser created. Login "admin" password "admin"'

        @functools.wraps(func)
        def wrapper(*args, **kw):
            cleanup()
            setup_environ()
            create_database()
            return func(*args, **kw)

        return wrapper

    return decorator


@django_environ(testing=True)
def runtests():
    pytest.main("--capture=no tests")


@django_environ()
def runserver():
    from django.core.management import execute_from_command_line
    execute_from_command_line(['manage.py', 'runserver'])


def cleanup():
    shell('find . -name *.pyc -delete')
    shell('find . -name __pycache__ -delete')
    shell('find . -name db_test.sqlite -delete')


if __name__ == '__main__':
    globals()[sys.argv[1]]()
